//
//  Playdate1.swift
//  Playdate
//
//  Created by Oscar Bjorkman on 5/24/15.
//  Copyright (c) 2015 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class Playdate1 : NSObject {

    //// Drawing Methods

    public class func drawLogin(#frame: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let background = UIColor(red: 0.000, green: 0.737, blue: 0.478, alpha: 1.000)


        //// Subframes
        let password: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.12533 + 0.5), frame.minY + floor(frame.height * 0.54873 + 0.5), floor(frame.width * 0.88000 + 0.5) - floor(frame.width * 0.12533 + 0.5), floor(frame.height * 0.63418 + 0.5) - floor(frame.height * 0.54873 + 0.5))
        let loginButton: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.12533 + 0.5), frame.minY + floor(frame.height * 0.69865 + 0.5), floor(frame.width * 0.88000 + 0.5) - floor(frame.width * 0.12533 + 0.5), floor(frame.height * 0.78411 + 0.5) - floor(frame.height * 0.69865 + 0.5))
        let username: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.12533 + 0.5), frame.minY + floor(frame.height * 0.39880 + 0.5), floor(frame.width * 0.88000 + 0.5) - floor(frame.width * 0.12533 + 0.5), floor(frame.height * 0.48426 + 0.5) - floor(frame.height * 0.39880 + 0.5))


        //// Welcome Drawing
        let welcomeRect = CGRectMake(frame.minX + floor(frame.width * 0.20267 + 0.5), frame.minY + floor(frame.height * 0.13493 + 0.5), floor(frame.width * 0.80267 + 0.5) - floor(frame.width * 0.20267 + 0.5), floor(frame.height * 0.23988 + 0.5) - floor(frame.height * 0.13493 + 0.5))
        var welcomeTextContent = NSString(string: "Welcome")
        let welcomeStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        welcomeStyle.alignment = NSTextAlignment.Center

        let welcomeFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(45), NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: welcomeStyle]

        let welcomeTextHeight: CGFloat = welcomeTextContent.boundingRectWithSize(CGSizeMake(welcomeRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: welcomeFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, welcomeRect);
        welcomeTextContent.drawInRect(CGRectMake(welcomeRect.minX, welcomeRect.minY + (welcomeRect.height - welcomeTextHeight) / 2, welcomeRect.width, welcomeTextHeight), withAttributes: welcomeFontAttributes)
        CGContextRestoreGState(context)


        //// Password
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(password.minX + floor(password.width * 0.00000 + 0.5), password.minY + floor(password.height * 0.00000 + 0.5), floor(password.width * 1.00000 + 0.5) - floor(password.width * 0.00000 + 0.5), floor(password.height * 1.00000 + 0.5) - floor(password.height * 0.00000 + 0.5)), cornerRadius: 5)
        UIColor.whiteColor().setFill()
        rectangle2Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRectMake(password.minX + floor(password.width * 0.03180 + 0.5), password.minY + floor(password.height * 0.12281 + 0.5), floor(password.width * 0.18198) - floor(password.width * 0.03180 + 0.5) + 0.5, floor(password.height * 0.85965 + 0.5) - floor(password.height * 0.12281 + 0.5)), cornerRadius: 6)
        background.setFill()
        rectangle4Path.fill()


        //// Group
        //// Oval 4 Drawing
        var oval4Path = UIBezierPath(ovalInRect: CGRectMake(password.minX + floor(password.width * 0.06007 + 0.5), password.minY + floor(password.height * 0.22807 + 0.5), floor(password.width * 0.14841 + 0.5) - floor(password.width * 0.06007 + 0.5), floor(password.height * 0.66667 + 0.5) - floor(password.height * 0.22807 + 0.5)))
        UIColor.whiteColor().setFill()
        oval4Path.fill()


        //// Oval 5 Drawing
        var oval5Path = UIBezierPath(ovalInRect: CGRectMake(password.minX + floor(password.width * 0.07067 + 0.5), password.minY + floor(password.height * 0.28070 + 0.5), floor(password.width * 0.13781 + 0.5) - floor(password.width * 0.07067 + 0.5), floor(password.height * 0.56140 + 0.5) - floor(password.height * 0.28070 + 0.5)))
        background.setFill()
        oval5Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRectMake(password.minX + floor(password.width * 0.05300 + 0.5), password.minY + floor(password.height * 0.43860 + 0.5), floor(password.width * 0.15548 + 0.5) - floor(password.width * 0.05300 + 0.5), floor(password.height * 0.75439 + 0.5) - floor(password.height * 0.43860 + 0.5)))
        UIColor.whiteColor().setFill()
        rectangle5Path.fill()


        //// Oval 6 Drawing
        var oval6Path = UIBezierPath(ovalInRect: CGRectMake(password.minX + floor(password.width * 0.09187 + 0.5), password.minY + floor(password.height * 0.49123 + 0.5), floor(password.width * 0.12014 + 0.5) - floor(password.width * 0.09187 + 0.5), floor(password.height * 0.57895 + 0.5) - floor(password.height * 0.49123 + 0.5)))
        background.setFill()
        oval6Path.fill()


        //// Polygon 2 Drawing
        var polygon2Path = UIBezierPath()
        polygon2Path.moveToPoint(CGPointMake(password.minX + 0.10424 * password.width, password.minY + 0.53070 * password.height))
        polygon2Path.addLineToPoint(CGPointMake(password.minX + 0.12260 * password.width, password.minY + 0.67215 * password.height))
        polygon2Path.addLineToPoint(CGPointMake(password.minX + 0.08588 * password.width, password.minY + 0.67215 * password.height))
        polygon2Path.closePath()
        background.setFill()
        polygon2Path.fill()






        //// Login Button
        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRectMake(loginButton.minX + floor(loginButton.width * 0.00000 + 0.5), loginButton.minY + floor(loginButton.height * 0.00000 + 0.5), floor(loginButton.width * 1.00000 + 0.5) - floor(loginButton.width * 0.00000 + 0.5), floor(loginButton.height * 1.00000 + 0.5) - floor(loginButton.height * 0.00000 + 0.5)), cornerRadius: 5)
        UIColor.whiteColor().setFill()
        rectangle6Path.fill()




        //// Username
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(username.minX + floor(username.width * 0.00000 + 0.5), username.minY + floor(username.height * 0.00000 + 0.5), floor(username.width * 1.00000 + 0.5) - floor(username.width * 0.00000 + 0.5), floor(username.height * 1.00000 + 0.5) - floor(username.height * 0.00000 + 0.5)), cornerRadius: 5)
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRectMake(username.minX + floor(username.width * 0.03180 + 0.5), username.minY + floor(username.height * 0.12281 + 0.5), floor(username.width * 0.18198) - floor(username.width * 0.03180 + 0.5) + 0.5, floor(username.height * 0.85965 + 0.5) - floor(username.height * 0.12281 + 0.5)), cornerRadius: 6)
        background.setFill()
        rectangle3Path.fill()


        //// Placeholder 2
        //// Oval 3 Drawing
        var oval3Path = UIBezierPath(ovalInRect: CGRectMake(username.minX + floor(username.width * 0.08481 + 0.5), username.minY + floor(username.height * 0.24561 + 0.5), floor(username.width * 0.13074 + 0.5) - floor(username.width * 0.08481 + 0.5), floor(username.height * 0.50877 + 0.5) - floor(username.height * 0.24561 + 0.5)))
        UIColor.whiteColor().setFill()
        oval3Path.fill()


        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(username.minX + floor(username.width * 0.05654 + 0.5), username.minY + floor(username.height * 0.50877 + 0.5), floor(username.width * 0.15901 + 0.5) - floor(username.width * 0.05654 + 0.5), floor(username.height * 0.92982 + 0.5) - floor(username.height * 0.50877 + 0.5)))
        UIColor.whiteColor().setFill()
        ovalPath.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRectMake(username.minX + floor(username.width * 0.05300 + 0.5), username.minY + floor(username.height * 0.70175 + 0.5), floor(username.width * 0.16254 + 0.5) - floor(username.width * 0.05300 + 0.5), floor(username.height * 0.85965 + 0.5) - floor(username.height * 0.70175 + 0.5)))
        background.setFill()
        rectangle7Path.fill()
    }

    public class func drawMail(#frame: CGRect) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 5.31, frame.minY - 2.79, floor((frame.width - 5.31) * 0.91783 + 5.12) - 4.62, floor((frame.height + 2.79) * 1.00000 - 3.08) + 3.58)


        //// Group
        //// Bezier 3 Drawing
        var bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(group.minX + 0.00719 * group.width, group.minY + 0.99995 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.38405 * group.width, group.minY + 0.54738 * group.height), controlPoint1: CGPointMake(group.minX + 0.00715 * group.width, group.minY + 1.00000 * group.height), controlPoint2: CGPointMake(group.minX + 0.23716 * group.width, group.minY + 0.72378 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.49939 * group.width, group.minY + 0.68590 * group.height), controlPoint1: CGPointMake(group.minX + 0.45081 * group.width, group.minY + 0.62756 * group.height), controlPoint2: CGPointMake(group.minX + 0.49939 * group.width, group.minY + 0.68590 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.61892 * group.width, group.minY + 0.54236 * group.height), controlPoint1: CGPointMake(group.minX + 0.49939 * group.width, group.minY + 0.68590 * group.height), controlPoint2: CGPointMake(group.minX + 0.55001 * group.width, group.minY + 0.62511 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 1.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.76558 * group.width, group.minY + 0.71849 * group.height), controlPoint2: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 1.00000 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.00715 * group.width, group.minY + 1.00000 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.00719 * group.width, group.minY + 0.99995 * group.height))
        bezier3Path.closePath()
        bezier3Path.moveToPoint(CGPointMake(group.minX + 0.67320 * group.width, group.minY + 0.50641 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.98544 * group.width, group.minY + 0.10671 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.98544 * group.width, group.minY + 0.90611 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.67320 * group.width, group.minY + 0.50641 * group.height))
        bezier3Path.closePath()
        bezier3Path.moveToPoint(CGPointMake(group.minX + 0.32906 * group.width, group.minY + 0.50641 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.01682 * group.width, group.minY + 0.90611 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.01682 * group.width, group.minY + 0.10671 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.32906 * group.width, group.minY + 0.50641 * group.height))
        bezier3Path.closePath()
        bezier3Path.moveToPoint(CGPointMake(group.minX + 0.49642 * group.width, group.minY + 0.59615 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.00000 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.99285 * group.width, group.minY + 0.00000 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.49642 * group.width, group.minY + 0.59615 * group.height))
        bezier3Path.closePath()
        UIColor.grayColor().setFill()
        bezier3Path.fill()
    }

    public class func drawPadlock(#frame: CGRect) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width) * 1.00000 + 0.5), floor((frame.height) * 1.00000 + 0.5))


        //// Group
        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.06522 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 0.93478 + 0.5) - floor(group.width * 0.06522 + 0.5), floor(group.height * 0.83051 + 0.5) - floor(group.height * 0.00000 + 0.5)))
        UIColor.grayColor().setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.17391 + 0.5), group.minY + floor(group.height * 0.10169 + 0.5), floor(group.width * 0.82609 + 0.5) - floor(group.width * 0.17391 + 0.5), floor(group.height * 0.66102 + 0.5) - floor(group.height * 0.10169 + 0.5)))
        UIColor.whiteColor().setFill()
        oval2Path.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.37288 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.37288 + 0.5)))
        UIColor.grayColor().setFill()
        rectangle2Path.fill()


        //// Oval 3 Drawing
        var oval3Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.36957 + 0.5), group.minY + floor(group.height * 0.47458 + 0.5), floor(group.width * 0.65217 + 0.5) - floor(group.width * 0.36957 + 0.5), floor(group.height * 0.67797 + 0.5) - floor(group.height * 0.47458 + 0.5)))
        UIColor.whiteColor().setFill()
        oval3Path.fill()


        //// Polygon Drawing
        var polygonPath = UIBezierPath()
        polygonPath.moveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.61441 * group.height))
        polygonPath.addLineToPoint(CGPointMake(group.minX + 0.67885 * group.width, group.minY + 0.86547 * group.height))
        polygonPath.addLineToPoint(CGPointMake(group.minX + 0.32115 * group.width, group.minY + 0.86547 * group.height))
        polygonPath.closePath()
        UIColor.whiteColor().setFill()
        polygonPath.fill()
    }

    public class func drawSignUp(#frame: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let background = UIColor(red: 0.000, green: 0.737, blue: 0.478, alpha: 1.000)


        //// Subframes
        let signupButton: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.12533 + 0.5), frame.minY + floor(frame.height * 0.76462 + 0.5), floor(frame.width * 0.88000 + 0.5) - floor(frame.width * 0.12533 + 0.5), floor(frame.height * 0.85157 + 0.5) - floor(frame.height * 0.76462 + 0.5))
        let usernameField: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.12533 + 0.5), frame.minY + floor(frame.height * 0.28486 + 0.5), floor(frame.width * 0.88000 + 0.5) - floor(frame.width * 0.12533 + 0.5), floor(frame.height * 0.37181 + 0.5) - floor(frame.height * 0.28486 + 0.5))
        let ageField: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.12533 + 0.5), frame.minY + floor(frame.height * 0.40480 + 0.5), floor(frame.width * 0.88000 + 0.5) - floor(frame.width * 0.12533 + 0.5), floor(frame.height * 0.49175 + 0.5) - floor(frame.height * 0.40480 + 0.5))
        let passwordField: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.12533 + 0.5), frame.minY + floor(frame.height * 0.64468 + 0.5), floor(frame.width * 0.88000 + 0.5) - floor(frame.width * 0.12533 + 0.5), floor(frame.height * 0.73163 + 0.5) - floor(frame.height * 0.64468 + 0.5))
        let locationField: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.12533 + 0.5), frame.minY + floor(frame.height * 0.52474 + 0.5), floor(frame.width * 0.88000 + 0.5) - floor(frame.width * 0.12533 + 0.5), floor(frame.height * 0.61169 + 0.5) - floor(frame.height * 0.52474 + 0.5))


        //// Welcome 2 Drawing
        let welcome2Rect = CGRectMake(frame.minX + 76, frame.minY + 90, 225, 70)
        var welcome2TextContent = NSString(string: "Sign Up")
        let welcome2Style = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        welcome2Style.alignment = NSTextAlignment.Center

        let welcome2FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(45), NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: welcome2Style]

        let welcome2TextHeight: CGFloat = welcome2TextContent.boundingRectWithSize(CGSizeMake(welcome2Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: welcome2FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, welcome2Rect);
        welcome2TextContent.drawInRect(CGRectMake(welcome2Rect.minX, welcome2Rect.minY + (welcome2Rect.height - welcome2TextHeight) / 2, welcome2Rect.width, welcome2TextHeight), withAttributes: welcome2FontAttributes)
        CGContextRestoreGState(context)


        //// Signup Button
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(signupButton.minX + floor(signupButton.width * 0.00000 + 0.5), signupButton.minY + floor(signupButton.height * 0.00000 + 0.5), floor(signupButton.width * 1.00000 + 0.5) - floor(signupButton.width * 0.00000 + 0.5), floor(signupButton.height * 1.00000 + 0.5) - floor(signupButton.height * 0.00000 + 0.5)), cornerRadius: 5)
        UIColor.whiteColor().setFill()
        rectanglePath.fill()




        //// Username Field
        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(roundedRect: CGRectMake(usernameField.minX + floor(usernameField.width * 0.00000 + 0.5), usernameField.minY + floor(usernameField.height * 0.00000 + 0.5), floor(usernameField.width * 1.00000 + 0.5) - floor(usernameField.width * 0.00000 + 0.5), floor(usernameField.height * 1.00000 + 0.5) - floor(usernameField.height * 0.00000 + 0.5)), cornerRadius: 5)
        UIColor.whiteColor().setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(roundedRect: CGRectMake(usernameField.minX + floor(usernameField.width * 0.03180 + 0.5), usernameField.minY + floor(usernameField.height * 0.12069 + 0.5), floor(usernameField.width * 0.18198) - floor(usernameField.width * 0.03180 + 0.5) + 0.5, floor(usernameField.height * 0.86207 + 0.5) - floor(usernameField.height * 0.12069 + 0.5)), cornerRadius: 6)
        background.setFill()
        rectangle9Path.fill()


        //// Placeholder
        //// Oval 2 Drawing
        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(usernameField.minX + floor(usernameField.width * 0.08481 + 0.5), usernameField.minY + floor(usernameField.height * 0.24138 + 0.5), floor(usernameField.width * 0.13074 + 0.5) - floor(usernameField.width * 0.08481 + 0.5), floor(usernameField.height * 0.50000 + 0.5) - floor(usernameField.height * 0.24138 + 0.5)))
        UIColor.whiteColor().setFill()
        oval2Path.fill()


        //// Oval 7 Drawing
        var oval7Path = UIBezierPath(ovalInRect: CGRectMake(usernameField.minX + floor(usernameField.width * 0.05654 + 0.5), usernameField.minY + floor(usernameField.height * 0.50000 + 0.5), floor(usernameField.width * 0.15901 + 0.5) - floor(usernameField.width * 0.05654 + 0.5), floor(usernameField.height * 0.93103 + 0.5) - floor(usernameField.height * 0.50000 + 0.5)))
        UIColor.whiteColor().setFill()
        oval7Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRectMake(usernameField.minX + floor(usernameField.width * 0.05300 + 0.5), usernameField.minY + floor(usernameField.height * 0.70690 + 0.5), floor(usernameField.width * 0.16254 + 0.5) - floor(usernameField.width * 0.05300 + 0.5), floor(usernameField.height * 0.86207 + 0.5) - floor(usernameField.height * 0.70690 + 0.5)))
        background.setFill()
        rectangle10Path.fill()






        //// Age Field
        //// Field
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(ageField.minX + floor(ageField.width * 0.00000 + 0.5), ageField.minY + floor(ageField.height * 0.00000 + 0.5), floor(ageField.width * 1.00000 + 0.5) - floor(ageField.width * 0.00000 + 0.5), floor(ageField.height * 1.00000 + 0.5) - floor(ageField.height * 0.00000 + 0.5)), cornerRadius: 5)
        UIColor.whiteColor().setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRectMake(ageField.minX + floor(ageField.width * 0.03180 + 0.5), ageField.minY + floor(ageField.height * 0.12069 + 0.5), floor(ageField.width * 0.18198) - floor(ageField.width * 0.03180 + 0.5) + 0.5, floor(ageField.height * 0.86207 + 0.5) - floor(ageField.height * 0.12069 + 0.5)), cornerRadius: 6)
        background.setFill()
        rectangle3Path.fill()




        //// Age Icon 2
        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(ageField.minX + floor(ageField.width * 0.06890) + 0.5, ageField.minY + floor(ageField.height * 0.22414 + 0.5), floor(ageField.width * 0.07951) - floor(ageField.width * 0.06890), floor(ageField.height * 0.34483 + 0.5) - floor(ageField.height * 0.22414 + 0.5)))
        UIColor.whiteColor().setFill()
        ovalPath.fill()


        //// Bezier 2 Drawing
        var bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(ageField.minX + 0.15901 * ageField.width, ageField.minY + 0.29311 * ageField.height))
        bezier2Path.addLineToPoint(CGPointMake(ageField.minX + 0.15901 * ageField.width, ageField.minY + 0.74138 * ageField.height))
        bezier2Path.addLineToPoint(CGPointMake(ageField.minX + 0.05300 * ageField.width, ageField.minY + 0.74138 * ageField.height))
        bezier2Path.addLineToPoint(CGPointMake(ageField.minX + 0.05300 * ageField.width, ageField.minY + 0.29310 * ageField.height))
        bezier2Path.addLineToPoint(CGPointMake(ageField.minX + 0.06600 * ageField.width, ageField.minY + 0.29310 * ageField.height))
        bezier2Path.addCurveToPoint(CGPointMake(ageField.minX + 0.06841 * ageField.width, ageField.minY + 0.34061 * ageField.height), controlPoint1: CGPointMake(ageField.minX + 0.06611 * ageField.width, ageField.minY + 0.31039 * ageField.height), controlPoint2: CGPointMake(ageField.minX + 0.06692 * ageField.width, ageField.minY + 0.32740 * ageField.height))
        bezier2Path.addCurveToPoint(CGPointMake(ageField.minX + 0.08014 * ageField.width, ageField.minY + 0.34061 * ageField.height), controlPoint1: CGPointMake(ageField.minX + 0.07165 * ageField.width, ageField.minY + 0.36922 * ageField.height), controlPoint2: CGPointMake(ageField.minX + 0.07690 * ageField.width, ageField.minY + 0.36922 * ageField.height))
        bezier2Path.addCurveToPoint(CGPointMake(ageField.minX + 0.08256 * ageField.width, ageField.minY + 0.29310 * ageField.height), controlPoint1: CGPointMake(ageField.minX + 0.08164 * ageField.width, ageField.minY + 0.32740 * ageField.height), controlPoint2: CGPointMake(ageField.minX + 0.08244 * ageField.width, ageField.minY + 0.31039 * ageField.height))
        bezier2Path.addCurveToPoint(CGPointMake(ageField.minX + 0.13090 * ageField.width, ageField.minY + 0.29310 * ageField.height), controlPoint1: CGPointMake(ageField.minX + 0.08256 * ageField.width, ageField.minY + 0.29310 * ageField.height), controlPoint2: CGPointMake(ageField.minX + 0.10909 * ageField.width, ageField.minY + 0.29310 * ageField.height))
        bezier2Path.addCurveToPoint(CGPointMake(ageField.minX + 0.13107 * ageField.width, ageField.minY + 0.30430 * ageField.height), controlPoint1: CGPointMake(ageField.minX + 0.13093 * ageField.width, ageField.minY + 0.29686 * ageField.height), controlPoint2: CGPointMake(ageField.minX + 0.13098 * ageField.width, ageField.minY + 0.30061 * ageField.height))
        bezier2Path.addCurveToPoint(CGPointMake(ageField.minX + 0.13332 * ageField.width, ageField.minY + 0.34061 * ageField.height), controlPoint1: CGPointMake(ageField.minX + 0.13140 * ageField.width, ageField.minY + 0.31761 * ageField.height), controlPoint2: CGPointMake(ageField.minX + 0.13215 * ageField.width, ageField.minY + 0.33027 * ageField.height))
        bezier2Path.addCurveToPoint(CGPointMake(ageField.minX + 0.14504 * ageField.width, ageField.minY + 0.34061 * ageField.height), controlPoint1: CGPointMake(ageField.minX + 0.13655 * ageField.width, ageField.minY + 0.36922 * ageField.height), controlPoint2: CGPointMake(ageField.minX + 0.14180 * ageField.width, ageField.minY + 0.36922 * ageField.height))
        bezier2Path.addCurveToPoint(CGPointMake(ageField.minX + 0.14746 * ageField.width, ageField.minY + 0.29310 * ageField.height), controlPoint1: CGPointMake(ageField.minX + 0.14654 * ageField.width, ageField.minY + 0.32740 * ageField.height), controlPoint2: CGPointMake(ageField.minX + 0.14734 * ageField.width, ageField.minY + 0.31039 * ageField.height))
        bezier2Path.addCurveToPoint(CGPointMake(ageField.minX + 0.15900 * ageField.width, ageField.minY + 0.29310 * ageField.height), controlPoint1: CGPointMake(ageField.minX + 0.15419 * ageField.width, ageField.minY + 0.29310 * ageField.height), controlPoint2: CGPointMake(ageField.minX + 0.15871 * ageField.width, ageField.minY + 0.29310 * ageField.height))
        bezier2Path.addLineToPoint(CGPointMake(ageField.minX + 0.15901 * ageField.width, ageField.minY + 0.29311 * ageField.height))
        bezier2Path.closePath()
        UIColor.whiteColor().setFill()
        bezier2Path.fill()


        //// Oval 3 Drawing
        var oval3Path = UIBezierPath(ovalInRect: CGRectMake(ageField.minX + floor(ageField.width * 0.13428 + 0.5), ageField.minY + floor(ageField.height * 0.22414 + 0.5), floor(ageField.width * 0.14488 + 0.5) - floor(ageField.width * 0.13428 + 0.5), floor(ageField.height * 0.34483 + 0.5) - floor(ageField.height * 0.22414 + 0.5)))
        UIColor.whiteColor().setFill()
        oval3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRectMake(ageField.minX + floor(ageField.width * 0.06714 + 0.5), ageField.minY + floor(ageField.height * 0.39655 + 0.5), floor(ageField.width * 0.14488 + 0.5) - floor(ageField.width * 0.06714 + 0.5), floor(ageField.height * 0.68966 + 0.5) - floor(ageField.height * 0.39655 + 0.5)))
        background.setFill()
        rectangle4Path.fill()






        //// Password Field
        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(roundedRect: CGRectMake(passwordField.minX + floor(passwordField.width * 0.00000 + 0.5), passwordField.minY + floor(passwordField.height * 0.00000 + 0.5), floor(passwordField.width * 1.00000 + 0.5) - floor(passwordField.width * 0.00000 + 0.5), floor(passwordField.height * 1.00000 + 0.5) - floor(passwordField.height * 0.00000 + 0.5)), cornerRadius: 5)
        UIColor.whiteColor().setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRectMake(passwordField.minX + floor(passwordField.width * 0.03180 + 0.5), passwordField.minY + floor(passwordField.height * 0.12069 + 0.5), floor(passwordField.width * 0.18198) - floor(passwordField.width * 0.03180 + 0.5) + 0.5, floor(passwordField.height * 0.86207 + 0.5) - floor(passwordField.height * 0.12069 + 0.5)), cornerRadius: 6)
        background.setFill()
        rectangle6Path.fill()


        //// Group 2
        //// Oval 4 Drawing
        var oval4Path = UIBezierPath(ovalInRect: CGRectMake(passwordField.minX + floor(passwordField.width * 0.06007 + 0.5), passwordField.minY + floor(passwordField.height * 0.22414 + 0.5), floor(passwordField.width * 0.14841 + 0.5) - floor(passwordField.width * 0.06007 + 0.5), floor(passwordField.height * 0.67241 + 0.5) - floor(passwordField.height * 0.22414 + 0.5)))
        UIColor.whiteColor().setFill()
        oval4Path.fill()


        //// Oval 5 Drawing
        var oval5Path = UIBezierPath(ovalInRect: CGRectMake(passwordField.minX + floor(passwordField.width * 0.07067 + 0.5), passwordField.minY + floor(passwordField.height * 0.27586 + 0.5), floor(passwordField.width * 0.13781 + 0.5) - floor(passwordField.width * 0.07067 + 0.5), floor(passwordField.height * 0.56897 + 0.5) - floor(passwordField.height * 0.27586 + 0.5)))
        background.setFill()
        oval5Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRectMake(passwordField.minX + floor(passwordField.width * 0.05300 + 0.5), passwordField.minY + floor(passwordField.height * 0.43103 + 0.5), floor(passwordField.width * 0.15548 + 0.5) - floor(passwordField.width * 0.05300 + 0.5), floor(passwordField.height * 0.75862 + 0.5) - floor(passwordField.height * 0.43103 + 0.5)))
        UIColor.whiteColor().setFill()
        rectangle7Path.fill()


        //// Oval 8 Drawing
        var oval8Path = UIBezierPath(ovalInRect: CGRectMake(passwordField.minX + floor(passwordField.width * 0.09187 + 0.5), passwordField.minY + floor(passwordField.height * 0.48276 + 0.5), floor(passwordField.width * 0.12014 + 0.5) - floor(passwordField.width * 0.09187 + 0.5), floor(passwordField.height * 0.58621 + 0.5) - floor(passwordField.height * 0.48276 + 0.5)))
        background.setFill()
        oval8Path.fill()


        //// Polygon Drawing
        var polygonPath = UIBezierPath()
        polygonPath.moveToPoint(CGPointMake(passwordField.minX + 0.10424 * passwordField.width, passwordField.minY + 0.53879 * passwordField.height))
        polygonPath.addLineToPoint(CGPointMake(passwordField.minX + 0.12260 * passwordField.width, passwordField.minY + 0.67780 * passwordField.height))
        polygonPath.addLineToPoint(CGPointMake(passwordField.minX + 0.08588 * passwordField.width, passwordField.minY + 0.67780 * passwordField.height))
        polygonPath.closePath()
        background.setFill()
        polygonPath.fill()






        //// Location Field
        //// Field 2
        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(roundedRect: CGRectMake(locationField.minX + floor(locationField.width * 0.00000 + 0.5), locationField.minY + floor(locationField.height * 0.00000 + 0.5), floor(locationField.width * 1.00000 + 0.5) - floor(locationField.width * 0.00000 + 0.5), floor(locationField.height * 1.00000 + 0.5) - floor(locationField.height * 0.00000 + 0.5)), cornerRadius: 5)
        UIColor.whiteColor().setFill()
        rectangle11Path.fill()


        //// Rectangle 12 Drawing
        let rectangle12Path = UIBezierPath(roundedRect: CGRectMake(locationField.minX + floor(locationField.width * 0.03180 + 0.5), locationField.minY + floor(locationField.height * 0.12069 + 0.5), floor(locationField.width * 0.18198) - floor(locationField.width * 0.03180 + 0.5) + 0.5, floor(locationField.height * 0.86207 + 0.5) - floor(locationField.height * 0.12069 + 0.5)), cornerRadius: 6)
        background.setFill()
        rectangle12Path.fill()




        //// Location icon
        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(locationField.minX + 0.14099 * locationField.width, locationField.minY + 0.28474 * locationField.height))
        bezierPath.addCurveToPoint(CGPointMake(locationField.minX + 0.14189 * locationField.width, locationField.minY + 0.57345 * locationField.height), controlPoint1: CGPointMake(locationField.minX + 0.16000 * locationField.width, locationField.minY + 0.36425 * locationField.height), controlPoint2: CGPointMake(locationField.minX + 0.16030 * locationField.width, locationField.minY + 0.49239 * locationField.height))
        bezierPath.addCurveToPoint(CGPointMake(locationField.minX + 0.14099 * locationField.width, locationField.minY + 0.57733 * locationField.height), controlPoint1: CGPointMake(locationField.minX + 0.14160 * locationField.width, locationField.minY + 0.57476 * locationField.height), controlPoint2: CGPointMake(locationField.minX + 0.14129 * locationField.width, locationField.minY + 0.57605 * locationField.height))
        bezierPath.addCurveToPoint(CGPointMake(locationField.minX + 0.10612 * locationField.width, locationField.minY + 0.77524 * locationField.height), controlPoint1: CGPointMake(locationField.minX + 0.14109 * locationField.width, locationField.minY + 0.57799 * locationField.height), controlPoint2: CGPointMake(locationField.minX + 0.10612 * locationField.width, locationField.minY + 0.77524 * locationField.height))
        bezierPath.addCurveToPoint(CGPointMake(locationField.minX + 0.07093 * locationField.width, locationField.minY + 0.57799 * locationField.height), controlPoint1: CGPointMake(locationField.minX + 0.10590 * locationField.width, locationField.minY + 0.77524 * locationField.height), controlPoint2: CGPointMake(locationField.minX + 0.07093 * locationField.width, locationField.minY + 0.57799 * locationField.height))
        bezierPath.addCurveToPoint(CGPointMake(locationField.minX + 0.07012 * locationField.width, locationField.minY + 0.57345 * locationField.height), controlPoint1: CGPointMake(locationField.minX + 0.07072 * locationField.width, locationField.minY + 0.57605 * locationField.height), controlPoint2: CGPointMake(locationField.minX + 0.07042 * locationField.width, locationField.minY + 0.57476 * locationField.height))
        bezierPath.addCurveToPoint(CGPointMake(locationField.minX + 0.07103 * locationField.width, locationField.minY + 0.28474 * locationField.height), controlPoint1: CGPointMake(locationField.minX + 0.05171 * locationField.width, locationField.minY + 0.49239 * locationField.height), controlPoint2: CGPointMake(locationField.minX + 0.05201 * locationField.width, locationField.minY + 0.36425 * locationField.height))
        bezierPath.addLineToPoint(CGPointMake(locationField.minX + 0.07118 * locationField.width, locationField.minY + 0.28409 * locationField.height))
        bezierPath.addCurveToPoint(CGPointMake(locationField.minX + 0.14099 * locationField.width, locationField.minY + 0.28474 * locationField.height), controlPoint1: CGPointMake(locationField.minX + 0.09051 * locationField.width, locationField.minY + 0.20394 * locationField.height), controlPoint2: CGPointMake(locationField.minX + 0.12172 * locationField.width, locationField.minY + 0.20415 * locationField.height))
        bezierPath.closePath()
        UIColor.whiteColor().setFill()
        bezierPath.fill()


        //// Oval 9 Drawing
        var oval9Path = UIBezierPath(ovalInRect: CGRectMake(locationField.minX + floor(locationField.width * 0.08127 + 0.5), locationField.minY + floor(locationField.height * 0.32759 + 0.5), floor(locationField.width * 0.13074 + 0.5) - floor(locationField.width * 0.08127 + 0.5), floor(locationField.height * 0.51724 + 0.5) - floor(locationField.height * 0.32759 + 0.5)))
        background.setFill()
        oval9Path.fill()
    }

    public class func drawPerson(#frame: CGRect) {


        //// Subframes
        let placeholder: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width - 0) * 0.99998 - 0.49) + 0.99, floor((frame.height) * 1.00000 + 0.5))


        //// Placeholder
        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(placeholder.minX + floor(placeholder.width * 0.24792 - 0.5) + 1, placeholder.minY + floor(placeholder.height * 0.00000 + 0.5), floor(placeholder.width * 0.74381 - 0.5) - floor(placeholder.width * 0.24792 - 0.5), floor(placeholder.height * 0.54054 + 0.5) - floor(placeholder.height * 0.00000 + 0.5)))
        UIColor.grayColor().setFill()
        ovalPath.fill()


        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(placeholder.minX + 0.85357 * placeholder.width, placeholder.minY + 0.67643 * placeholder.height))
        bezierPath.addCurveToPoint(CGPointMake(placeholder.minX + 1.00000 * placeholder.width, placeholder.minY + 1.00000 * placeholder.height), controlPoint1: CGPointMake(placeholder.minX + 0.94997 * placeholder.width, placeholder.minY + 0.76588 * placeholder.height), controlPoint2: CGPointMake(placeholder.minX + 0.99878 * placeholder.width, placeholder.minY + 0.88277 * placeholder.height))
        bezierPath.addLineToPoint(CGPointMake(placeholder.minX + 0.00000 * placeholder.width, placeholder.minY + 1.00000 * placeholder.height))
        bezierPath.addCurveToPoint(CGPointMake(placeholder.minX + 0.14643 * placeholder.width, placeholder.minY + 0.67643 * placeholder.height), controlPoint1: CGPointMake(placeholder.minX + 0.00122 * placeholder.width, placeholder.minY + 0.88277 * placeholder.height), controlPoint2: CGPointMake(placeholder.minX + 0.05003 * placeholder.width, placeholder.minY + 0.76588 * placeholder.height))
        bezierPath.addCurveToPoint(CGPointMake(placeholder.minX + 0.36095 * placeholder.width, placeholder.minY + 0.55875 * placeholder.height), controlPoint1: CGPointMake(placeholder.minX + 0.20832 * placeholder.width, placeholder.minY + 0.61900 * placeholder.height), controlPoint2: CGPointMake(placeholder.minX + 0.28241 * placeholder.width, placeholder.minY + 0.57978 * placeholder.height))
        bezierPath.addCurveToPoint(CGPointMake(placeholder.minX + 0.85357 * placeholder.width, placeholder.minY + 0.67643 * placeholder.height), controlPoint1: CGPointMake(placeholder.minX + 0.53021 * placeholder.width, placeholder.minY + 0.51345 * placeholder.height), controlPoint2: CGPointMake(placeholder.minX + 0.72019 * placeholder.width, placeholder.minY + 0.55267 * placeholder.height))
        bezierPath.closePath()
        UIColor.grayColor().setFill()
        bezierPath.fill()
    }

    public class func drawAge(#frame: CGRect) {


        //// Subframes
        let ageIcon: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width) * 1.00000 + 0.5), floor((frame.height) * 1.00000 + 0.5))


        //// Age Icon
        //// Oval 3 Drawing
        var oval3Path = UIBezierPath(ovalInRect: CGRectMake(ageIcon.minX + floor(ageIcon.width * 0.14286 + 0.5), ageIcon.minY + floor(ageIcon.height * 0.00000 + 0.5), floor(ageIcon.width * 0.25850 + 0.5) - floor(ageIcon.width * 0.14286 + 0.5), floor(ageIcon.height * 0.23333 + 0.5) - floor(ageIcon.height * 0.00000 + 0.5)))
        UIColor.grayColor().setFill()
        oval3Path.fill()


        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(ageIcon.minX + 1.00000 * ageIcon.width, ageIcon.minY + 0.13334 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 1.00000 * ageIcon.width, ageIcon.minY + 1.00000 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 1.00000 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 1.00000 * ageIcon.width, ageIcon.minY + 1.00000 * ageIcon.height))
        bezierPath.addLineToPoint(CGPointMake(ageIcon.minX + 0.00000 * ageIcon.width, ageIcon.minY + 1.00000 * ageIcon.height))
        bezierPath.addLineToPoint(CGPointMake(ageIcon.minX + 0.00000 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height))
        bezierPath.addLineToPoint(CGPointMake(ageIcon.minX + 0.12258 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.14536 * ageIcon.width, ageIcon.minY + 0.22517 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.12366 * ageIcon.width, ageIcon.minY + 0.16676 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.13126 * ageIcon.width, ageIcon.minY + 0.19963 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.25600 * ageIcon.width, ageIcon.minY + 0.22517 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.17591 * ageIcon.width, ageIcon.minY + 0.28050 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.22545 * ageIcon.width, ageIcon.minY + 0.28050 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.27878 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.27010 * ageIcon.width, ageIcon.minY + 0.19963 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.27770 * ageIcon.width, ageIcon.minY + 0.16676 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.73483 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.27878 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.52913 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.73646 * ageIcon.width, ageIcon.minY + 0.15499 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.73506 * ageIcon.width, ageIcon.minY + 0.14060 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.73561 * ageIcon.width, ageIcon.minY + 0.14784 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.75761 * ageIcon.width, ageIcon.minY + 0.22517 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.73952 * ageIcon.width, ageIcon.minY + 0.18071 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.74657 * ageIcon.width, ageIcon.minY + 0.20518 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.86824 * ageIcon.width, ageIcon.minY + 0.22517 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.78816 * ageIcon.width, ageIcon.minY + 0.28050 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.83769 * ageIcon.width, ageIcon.minY + 0.28050 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.89102 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.88235 * ageIcon.width, ageIcon.minY + 0.19963 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.88994 * ageIcon.width, ageIcon.minY + 0.16676 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.99987 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.95448 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.99721 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height))
        bezierPath.addLineToPoint(CGPointMake(ageIcon.minX + 1.00000 * ageIcon.width, ageIcon.minY + 0.13334 * ageIcon.height))
        bezierPath.closePath()
        UIColor.grayColor().setFill()
        bezierPath.fill()


        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(ageIcon.minX + floor(ageIcon.width * 0.75510 + 0.5), ageIcon.minY + floor(ageIcon.height * 0.00000 + 0.5), floor(ageIcon.width * 0.87075 + 0.5) - floor(ageIcon.width * 0.75510 + 0.5), floor(ageIcon.height * 0.23333 + 0.5) - floor(ageIcon.height * 0.00000 + 0.5)))
        UIColor.grayColor().setFill()
        ovalPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(ageIcon.minX + floor(ageIcon.width * 0.12925 + 0.5), ageIcon.minY + floor(ageIcon.height * 0.35000 + 0.5), floor(ageIcon.width * 0.88435 + 0.5) - floor(ageIcon.width * 0.12925 + 0.5), floor(ageIcon.height * 0.88333 + 0.5) - floor(ageIcon.height * 0.35000 + 0.5)))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()
    }

    public class func drawProfile() {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(0, 334, 375, 333))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(138, 62, 100, 100))
        UIColor.whiteColor().setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()
    }

    public class func drawLocation(#frame: CGRect) {


        //// Subframes
        let locationPin: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width) * 1.00000 + 0.5), floor((frame.height) * 1.00000 + 0.5))


        //// LocationPin
        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(locationPin.minX + 0.85355 * locationPin.width, locationPin.minY + 0.10919 * locationPin.height))
        bezierPath.addCurveToPoint(CGPointMake(locationPin.minX + 0.88376 * locationPin.width, locationPin.minY + 0.61182 * locationPin.height), controlPoint1: CGPointMake(locationPin.minX + 1.03817 * locationPin.width, locationPin.minY + 0.24684 * locationPin.height), controlPoint2: CGPointMake(locationPin.minX + 1.04823 * locationPin.width, locationPin.minY + 0.46535 * locationPin.height))
        bezierPath.addCurveToPoint(CGPointMake(locationPin.minX + 0.50000 * locationPin.width, locationPin.minY + 1.00000 * locationPin.height), controlPoint1: CGPointMake(locationPin.minX + 0.78578 * locationPin.width, locationPin.minY + 0.71092 * locationPin.height), controlPoint2: CGPointMake(locationPin.minX + 0.50000 * locationPin.width, locationPin.minY + 1.00000 * locationPin.height))
        bezierPath.addCurveToPoint(CGPointMake(locationPin.minX + 0.11624 * locationPin.width, locationPin.minY + 0.61182 * locationPin.height), controlPoint1: CGPointMake(locationPin.minX + 0.50000 * locationPin.width, locationPin.minY + 1.00000 * locationPin.height), controlPoint2: CGPointMake(locationPin.minX + 0.21422 * locationPin.width, locationPin.minY + 0.71092 * locationPin.height))
        bezierPath.addCurveToPoint(CGPointMake(locationPin.minX + 0.14645 * locationPin.width, locationPin.minY + 0.10919 * locationPin.height), controlPoint1: CGPointMake(locationPin.minX + -0.04823 * locationPin.width, locationPin.minY + 0.46535 * locationPin.height), controlPoint2: CGPointMake(locationPin.minX + -0.03817 * locationPin.width, locationPin.minY + 0.24684 * locationPin.height))
        bezierPath.addLineToPoint(CGPointMake(locationPin.minX + 0.14802 * locationPin.width, locationPin.minY + 0.10803 * locationPin.height))
        bezierPath.addCurveToPoint(CGPointMake(locationPin.minX + 0.85355 * locationPin.width, locationPin.minY + 0.10919 * locationPin.height), controlPoint1: CGPointMake(locationPin.minX + 0.34340 * locationPin.width, locationPin.minY + -0.03640 * locationPin.height), controlPoint2: CGPointMake(locationPin.minX + 0.65881 * locationPin.width, locationPin.minY + -0.03601 * locationPin.height))
        bezierPath.closePath()
        UIColor.grayColor().setFill()
        bezierPath.fill()


        //// Oval 2 Drawing
        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(locationPin.minX + floor(locationPin.width * 0.26190 - 0.5) + 1, locationPin.minY + floor(locationPin.height * 0.19298 + 0.5), floor(locationPin.width * 0.73810 - 0.5) - floor(locationPin.width * 0.26190 - 0.5), floor(locationPin.height * 0.54386 + 0.5) - floor(locationPin.height * 0.19298 + 0.5)))
        UIColor.whiteColor().setFill()
        oval2Path.fill()
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
