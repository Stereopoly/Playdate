//
//  Playdate1.swift
//  Playdate
//
//  Created by Oscar Bjorkman on 5/21/15.
//  Copyright (c) 2015 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class Playdate1 : NSObject {

    //// Drawing Methods

    public class func drawLogin() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let background = UIColor(red: 0.000, green: 0.737, blue: 0.478, alpha: 1.000)

        //// Welcome Drawing
        let welcomeRect = CGRectMake(76, 90, 225, 70)
        var welcomeTextContent = NSString(string: "Welcome")
        let welcomeStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        welcomeStyle.alignment = NSTextAlignment.Center

        let welcomeFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(45), NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: welcomeStyle]

        let welcomeTextHeight: CGFloat = welcomeTextContent.boundingRectWithSize(CGSizeMake(welcomeRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: welcomeFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, welcomeRect);
        welcomeTextContent.drawInRect(CGRectMake(welcomeRect.minX, welcomeRect.minY + (welcomeRect.height - welcomeTextHeight) / 2, welcomeRect.width, welcomeTextHeight), withAttributes: welcomeFontAttributes)
        CGContextRestoreGState(context)


        //// Password
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(47, 365, 283, 58), cornerRadius: 5)
        UIColor.whiteColor().setFill()
        rectangle2Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRectMake(56, 372, 42.5, 43), cornerRadius: 6)
        background.setFill()
        rectangle4Path.fill()


        //// Group
        //// Oval 4 Drawing
        var oval4Path = UIBezierPath(ovalInRect: CGRectMake(64, 378, 25, 26))
        UIColor.whiteColor().setFill()
        oval4Path.fill()


        //// Oval 5 Drawing
        var oval5Path = UIBezierPath(ovalInRect: CGRectMake(67, 381, 19, 17))
        background.setFill()
        oval5Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRectMake(62, 390, 29, 19))
        UIColor.whiteColor().setFill()
        rectangle5Path.fill()


        //// Oval 6 Drawing
        var oval6Path = UIBezierPath(ovalInRect: CGRectMake(73, 393, 8, 6))
        background.setFill()
        oval6Path.fill()


        //// Polygon 2 Drawing
        var polygon2Path = UIBezierPath()
        polygon2Path.moveToPoint(CGPointMake(76.5, 396.25))
        polygon2Path.addLineToPoint(CGPointMake(81.7, 404.31))
        polygon2Path.addLineToPoint(CGPointMake(71.3, 404.31))
        polygon2Path.closePath()
        background.setFill()
        polygon2Path.fill()






        //// Login Button
        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRectMake(47, 465, 283, 58), cornerRadius: 5)
        UIColor.whiteColor().setFill()
        rectangle6Path.fill()




        //// Username
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(47, 265, 283, 58), cornerRadius: 5)
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRectMake(56, 272, 42.5, 43), cornerRadius: 6)
        background.setFill()
        rectangle3Path.fill()


        //// Placeholder 2
        //// Oval 3 Drawing
        var oval3Path = UIBezierPath(ovalInRect: CGRectMake(71, 279, 13, 15))
        UIColor.whiteColor().setFill()
        oval3Path.fill()


        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(63, 294, 29, 25))
        UIColor.whiteColor().setFill()
        ovalPath.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRectMake(62, 306, 31, 9))
        background.setFill()
        rectangle7Path.fill()
    }

    public class func drawMail(#frame: CGRect) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 5.31, frame.minY - 2.79, floor((frame.width - 5.31) * 0.91783 + 5.12) - 4.62, floor((frame.height + 2.79) * 1.00000 - 3.08) + 3.58)


        //// Group
        //// Bezier 3 Drawing
        var bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(group.minX + 0.00719 * group.width, group.minY + 0.99995 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.38405 * group.width, group.minY + 0.54738 * group.height), controlPoint1: CGPointMake(group.minX + 0.00715 * group.width, group.minY + 1.00000 * group.height), controlPoint2: CGPointMake(group.minX + 0.23716 * group.width, group.minY + 0.72378 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.49939 * group.width, group.minY + 0.68590 * group.height), controlPoint1: CGPointMake(group.minX + 0.45081 * group.width, group.minY + 0.62756 * group.height), controlPoint2: CGPointMake(group.minX + 0.49939 * group.width, group.minY + 0.68590 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.61892 * group.width, group.minY + 0.54236 * group.height), controlPoint1: CGPointMake(group.minX + 0.49939 * group.width, group.minY + 0.68590 * group.height), controlPoint2: CGPointMake(group.minX + 0.55001 * group.width, group.minY + 0.62511 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 1.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.76558 * group.width, group.minY + 0.71849 * group.height), controlPoint2: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 1.00000 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.00715 * group.width, group.minY + 1.00000 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.00719 * group.width, group.minY + 0.99995 * group.height))
        bezier3Path.closePath()
        bezier3Path.moveToPoint(CGPointMake(group.minX + 0.67320 * group.width, group.minY + 0.50641 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.98544 * group.width, group.minY + 0.10671 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.98544 * group.width, group.minY + 0.90611 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.67320 * group.width, group.minY + 0.50641 * group.height))
        bezier3Path.closePath()
        bezier3Path.moveToPoint(CGPointMake(group.minX + 0.32906 * group.width, group.minY + 0.50641 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.01682 * group.width, group.minY + 0.90611 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.01682 * group.width, group.minY + 0.10671 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.32906 * group.width, group.minY + 0.50641 * group.height))
        bezier3Path.closePath()
        bezier3Path.moveToPoint(CGPointMake(group.minX + 0.49642 * group.width, group.minY + 0.59615 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.00000 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.99285 * group.width, group.minY + 0.00000 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.49642 * group.width, group.minY + 0.59615 * group.height))
        bezier3Path.closePath()
        UIColor.grayColor().setFill()
        bezier3Path.fill()
    }

    public class func drawPadlock(#frame: CGRect) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width) * 1.00000 + 0.5), floor((frame.height) * 1.00000 + 0.5))


        //// Group
        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.06522 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 0.93478 + 0.5) - floor(group.width * 0.06522 + 0.5), floor(group.height * 0.83051 + 0.5) - floor(group.height * 0.00000 + 0.5)))
        UIColor.grayColor().setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.17391 + 0.5), group.minY + floor(group.height * 0.10169 + 0.5), floor(group.width * 0.82609 + 0.5) - floor(group.width * 0.17391 + 0.5), floor(group.height * 0.66102 + 0.5) - floor(group.height * 0.10169 + 0.5)))
        UIColor.whiteColor().setFill()
        oval2Path.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.37288 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.37288 + 0.5)))
        UIColor.grayColor().setFill()
        rectangle2Path.fill()


        //// Oval 3 Drawing
        var oval3Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.36957 + 0.5), group.minY + floor(group.height * 0.47458 + 0.5), floor(group.width * 0.65217 + 0.5) - floor(group.width * 0.36957 + 0.5), floor(group.height * 0.67797 + 0.5) - floor(group.height * 0.47458 + 0.5)))
        UIColor.whiteColor().setFill()
        oval3Path.fill()


        //// Polygon Drawing
        var polygonPath = UIBezierPath()
        polygonPath.moveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.61441 * group.height))
        polygonPath.addLineToPoint(CGPointMake(group.minX + 0.67885 * group.width, group.minY + 0.86547 * group.height))
        polygonPath.addLineToPoint(CGPointMake(group.minX + 0.32115 * group.width, group.minY + 0.86547 * group.height))
        polygonPath.closePath()
        UIColor.whiteColor().setFill()
        polygonPath.fill()
    }

    public class func drawSignUp() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let background = UIColor(red: 0.000, green: 0.737, blue: 0.478, alpha: 1.000)

        //// Welcome 2 Drawing
        let welcome2Rect = CGRectMake(76, 90, 225, 70)
        var welcome2TextContent = NSString(string: "Sign Up")
        let welcome2Style = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        welcome2Style.alignment = NSTextAlignment.Center

        let welcome2FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(45), NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: welcome2Style]

        let welcome2TextHeight: CGFloat = welcome2TextContent.boundingRectWithSize(CGSizeMake(welcome2Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: welcome2FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, welcome2Rect);
        welcome2TextContent.drawInRect(CGRectMake(welcome2Rect.minX, welcome2Rect.minY + (welcome2Rect.height - welcome2TextHeight) / 2, welcome2Rect.width, welcome2TextHeight), withAttributes: welcome2FontAttributes)
        CGContextRestoreGState(context)


        //// Signup Button
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(47, 510, 283, 58), cornerRadius: 5)
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRectMake(111, 519, 154, 40)
        var textTextContent = NSString(string: "Sign Up")
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Center

        let textFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(23), NSForegroundColorAttributeName: background, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRectWithSize(CGSizeMake(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect);
        textTextContent.drawInRect(CGRectMake(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)




        //// Username Field
        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(roundedRect: CGRectMake(47, 190, 283, 58), cornerRadius: 5)
        UIColor.whiteColor().setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(roundedRect: CGRectMake(56, 197, 42.5, 43), cornerRadius: 6)
        background.setFill()
        rectangle9Path.fill()


        //// Placeholder
        //// Oval 2 Drawing
        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(71, 204, 13, 15))
        UIColor.whiteColor().setFill()
        oval2Path.fill()


        //// Oval 7 Drawing
        var oval7Path = UIBezierPath(ovalInRect: CGRectMake(63, 219, 29, 25))
        UIColor.whiteColor().setFill()
        oval7Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRectMake(62, 231, 31, 9))
        background.setFill()
        rectangle10Path.fill()






        //// Age Field
        //// Field
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(47, 270, 283, 58), cornerRadius: 5)
        UIColor.whiteColor().setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRectMake(56, 277, 42.5, 43), cornerRadius: 6)
        background.setFill()
        rectangle3Path.fill()




        //// Age Icon 2
        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(66.5, 283, 3, 7))
        UIColor.whiteColor().setFill()
        ovalPath.fill()


        //// Bezier 2 Drawing
        var bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(92, 287))
        bezier2Path.addLineToPoint(CGPointMake(92, 313))
        bezier2Path.addLineToPoint(CGPointMake(62, 313))
        bezier2Path.addLineToPoint(CGPointMake(62, 287))
        bezier2Path.addLineToPoint(CGPointMake(65.68, 287))
        bezier2Path.addCurveToPoint(CGPointMake(66.36, 289.76), controlPoint1: CGPointMake(65.71, 288), controlPoint2: CGPointMake(65.94, 288.99))
        bezier2Path.addCurveToPoint(CGPointMake(69.68, 289.76), controlPoint1: CGPointMake(67.28, 291.41), controlPoint2: CGPointMake(68.76, 291.41))
        bezier2Path.addCurveToPoint(CGPointMake(70.36, 287), controlPoint1: CGPointMake(70.1, 288.99), controlPoint2: CGPointMake(70.33, 288))
        bezier2Path.addCurveToPoint(CGPointMake(84.04, 287), controlPoint1: CGPointMake(70.36, 287), controlPoint2: CGPointMake(77.87, 287))
        bezier2Path.addCurveToPoint(CGPointMake(84.09, 287.65), controlPoint1: CGPointMake(84.05, 287.22), controlPoint2: CGPointMake(84.07, 287.44))
        bezier2Path.addCurveToPoint(CGPointMake(84.73, 289.76), controlPoint1: CGPointMake(84.19, 288.42), controlPoint2: CGPointMake(84.4, 289.16))
        bezier2Path.addCurveToPoint(CGPointMake(88.05, 289.76), controlPoint1: CGPointMake(85.64, 291.41), controlPoint2: CGPointMake(87.13, 291.41))
        bezier2Path.addCurveToPoint(CGPointMake(88.73, 287), controlPoint1: CGPointMake(88.47, 288.99), controlPoint2: CGPointMake(88.7, 288))
        bezier2Path.addCurveToPoint(CGPointMake(92, 287), controlPoint1: CGPointMake(90.63, 287), controlPoint2: CGPointMake(91.92, 287))
        bezier2Path.addLineToPoint(CGPointMake(92, 287))
        bezier2Path.closePath()
        UIColor.whiteColor().setFill()
        bezier2Path.fill()


        //// Oval 3 Drawing
        var oval3Path = UIBezierPath(ovalInRect: CGRectMake(85, 283, 3, 7))
        UIColor.whiteColor().setFill()
        oval3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRectMake(66, 293, 22, 17))
        background.setFill()
        rectangle4Path.fill()


        //// Text 2 Drawing
        let text2Rect = CGRectMake(67, 291, 19, 21)
        var text2TextContent = NSString(string: "19")
        let text2Style = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        text2Style.alignment = NSTextAlignment.Center

        let text2FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRectWithSize(CGSizeMake(text2Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text2Rect);
        text2TextContent.drawInRect(CGRectMake(text2Rect.minX, text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, text2Rect.width, text2TextHeight), withAttributes: text2FontAttributes)
        CGContextRestoreGState(context)






        //// Password Field
        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(roundedRect: CGRectMake(47, 430, 283, 58), cornerRadius: 5)
        UIColor.whiteColor().setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRectMake(56, 437, 42.5, 43), cornerRadius: 6)
        background.setFill()
        rectangle6Path.fill()


        //// Group 2
        //// Oval 4 Drawing
        var oval4Path = UIBezierPath(ovalInRect: CGRectMake(64, 443, 25, 26))
        UIColor.whiteColor().setFill()
        oval4Path.fill()


        //// Oval 5 Drawing
        var oval5Path = UIBezierPath(ovalInRect: CGRectMake(67, 446, 19, 17))
        background.setFill()
        oval5Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRectMake(62, 455, 29, 19))
        UIColor.whiteColor().setFill()
        rectangle7Path.fill()


        //// Oval 8 Drawing
        var oval8Path = UIBezierPath(ovalInRect: CGRectMake(73, 458, 8, 6))
        background.setFill()
        oval8Path.fill()


        //// Polygon Drawing
        var polygonPath = UIBezierPath()
        polygonPath.moveToPoint(CGPointMake(76.5, 461.25))
        polygonPath.addLineToPoint(CGPointMake(81.7, 469.31))
        polygonPath.addLineToPoint(CGPointMake(71.3, 469.31))
        polygonPath.closePath()
        background.setFill()
        polygonPath.fill()






        //// Location Field
        //// Field 2
        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(roundedRect: CGRectMake(47, 350, 283, 58), cornerRadius: 5)
        UIColor.whiteColor().setFill()
        rectangle11Path.fill()


        //// Rectangle 12 Drawing
        let rectangle12Path = UIBezierPath(roundedRect: CGRectMake(56, 357, 42.5, 43), cornerRadius: 6)
        background.setFill()
        rectangle12Path.fill()




        //// Location icon
        //// Oval 6 Drawing
        var oval6Path = UIBezierPath(ovalInRect: CGRectMake(63, 363, 28, 24))
        UIColor.whiteColor().setFill()
        oval6Path.fill()


        //// Polygon 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 90.46, 395)
        CGContextRotateCTM(context, 180 * CGFloat(M_PI) / 180)

        var polygon2Path = UIBezierPath()
        polygon2Path.moveToPoint(CGPointMake(13.46, -0))
        polygon2Path.addLineToPoint(CGPointMake(25.11, 13.47))
        polygon2Path.addLineToPoint(CGPointMake(1.8, 13.47))
        polygon2Path.closePath()
        UIColor.whiteColor().setFill()
        polygon2Path.fill()

        CGContextRestoreGState(context)


        //// Oval 9 Drawing
        var oval9Path = UIBezierPath(ovalInRect: CGRectMake(70, 369, 14, 11))
        background.setFill()
        oval9Path.fill()
    }

    public class func drawPerson(#frame: CGRect) {


        //// Subframes
        let placeholder: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width - 0) * 0.99998 - 0.49) + 0.99, floor((frame.height) * 1.00000 + 0.5))


        //// Placeholder
        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(placeholder.minX + floor(placeholder.width * 0.24792 - 0.5) + 1, placeholder.minY + floor(placeholder.height * 0.00000 + 0.5), floor(placeholder.width * 0.74381 - 0.5) - floor(placeholder.width * 0.24792 - 0.5), floor(placeholder.height * 0.54054 + 0.5) - floor(placeholder.height * 0.00000 + 0.5)))
        UIColor.grayColor().setFill()
        ovalPath.fill()


        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(placeholder.minX + 0.85357 * placeholder.width, placeholder.minY + 0.67643 * placeholder.height))
        bezierPath.addCurveToPoint(CGPointMake(placeholder.minX + 1.00000 * placeholder.width, placeholder.minY + 1.00000 * placeholder.height), controlPoint1: CGPointMake(placeholder.minX + 0.94997 * placeholder.width, placeholder.minY + 0.76588 * placeholder.height), controlPoint2: CGPointMake(placeholder.minX + 0.99878 * placeholder.width, placeholder.minY + 0.88277 * placeholder.height))
        bezierPath.addLineToPoint(CGPointMake(placeholder.minX + 0.00000 * placeholder.width, placeholder.minY + 1.00000 * placeholder.height))
        bezierPath.addCurveToPoint(CGPointMake(placeholder.minX + 0.14643 * placeholder.width, placeholder.minY + 0.67643 * placeholder.height), controlPoint1: CGPointMake(placeholder.minX + 0.00122 * placeholder.width, placeholder.minY + 0.88277 * placeholder.height), controlPoint2: CGPointMake(placeholder.minX + 0.05003 * placeholder.width, placeholder.minY + 0.76588 * placeholder.height))
        bezierPath.addCurveToPoint(CGPointMake(placeholder.minX + 0.36095 * placeholder.width, placeholder.minY + 0.55875 * placeholder.height), controlPoint1: CGPointMake(placeholder.minX + 0.20832 * placeholder.width, placeholder.minY + 0.61900 * placeholder.height), controlPoint2: CGPointMake(placeholder.minX + 0.28241 * placeholder.width, placeholder.minY + 0.57978 * placeholder.height))
        bezierPath.addCurveToPoint(CGPointMake(placeholder.minX + 0.85357 * placeholder.width, placeholder.minY + 0.67643 * placeholder.height), controlPoint1: CGPointMake(placeholder.minX + 0.53021 * placeholder.width, placeholder.minY + 0.51345 * placeholder.height), controlPoint2: CGPointMake(placeholder.minX + 0.72019 * placeholder.width, placeholder.minY + 0.55267 * placeholder.height))
        bezierPath.closePath()
        UIColor.grayColor().setFill()
        bezierPath.fill()
    }

    public class func drawAge(#frame: CGRect) {


        //// Subframes
        let ageIcon: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width) * 1.00000 + 0.5), floor((frame.height) * 1.00000 + 0.5))


        //// Age Icon
        //// Oval 3 Drawing
        var oval3Path = UIBezierPath(ovalInRect: CGRectMake(ageIcon.minX + floor(ageIcon.width * 0.14286 + 0.5), ageIcon.minY + floor(ageIcon.height * 0.00000 + 0.5), floor(ageIcon.width * 0.25850 + 0.5) - floor(ageIcon.width * 0.14286 + 0.5), floor(ageIcon.height * 0.23333 + 0.5) - floor(ageIcon.height * 0.00000 + 0.5)))
        UIColor.grayColor().setFill()
        oval3Path.fill()


        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(ageIcon.minX + 1.00000 * ageIcon.width, ageIcon.minY + 0.13334 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 1.00000 * ageIcon.width, ageIcon.minY + 1.00000 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 1.00000 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 1.00000 * ageIcon.width, ageIcon.minY + 1.00000 * ageIcon.height))
        bezierPath.addLineToPoint(CGPointMake(ageIcon.minX + 0.00000 * ageIcon.width, ageIcon.minY + 1.00000 * ageIcon.height))
        bezierPath.addLineToPoint(CGPointMake(ageIcon.minX + 0.00000 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height))
        bezierPath.addLineToPoint(CGPointMake(ageIcon.minX + 0.12258 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.14536 * ageIcon.width, ageIcon.minY + 0.22517 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.12366 * ageIcon.width, ageIcon.minY + 0.16676 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.13126 * ageIcon.width, ageIcon.minY + 0.19963 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.25600 * ageIcon.width, ageIcon.minY + 0.22517 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.17591 * ageIcon.width, ageIcon.minY + 0.28050 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.22545 * ageIcon.width, ageIcon.minY + 0.28050 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.27878 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.27010 * ageIcon.width, ageIcon.minY + 0.19963 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.27770 * ageIcon.width, ageIcon.minY + 0.16676 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.73483 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.27878 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.52913 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.73646 * ageIcon.width, ageIcon.minY + 0.15499 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.73506 * ageIcon.width, ageIcon.minY + 0.14060 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.73561 * ageIcon.width, ageIcon.minY + 0.14784 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.75761 * ageIcon.width, ageIcon.minY + 0.22517 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.73952 * ageIcon.width, ageIcon.minY + 0.18071 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.74657 * ageIcon.width, ageIcon.minY + 0.20518 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.86824 * ageIcon.width, ageIcon.minY + 0.22517 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.78816 * ageIcon.width, ageIcon.minY + 0.28050 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.83769 * ageIcon.width, ageIcon.minY + 0.28050 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.89102 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.88235 * ageIcon.width, ageIcon.minY + 0.19963 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.88994 * ageIcon.width, ageIcon.minY + 0.16676 * ageIcon.height))
        bezierPath.addCurveToPoint(CGPointMake(ageIcon.minX + 0.99987 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height), controlPoint1: CGPointMake(ageIcon.minX + 0.95448 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height), controlPoint2: CGPointMake(ageIcon.minX + 0.99721 * ageIcon.width, ageIcon.minY + 0.13333 * ageIcon.height))
        bezierPath.addLineToPoint(CGPointMake(ageIcon.minX + 1.00000 * ageIcon.width, ageIcon.minY + 0.13334 * ageIcon.height))
        bezierPath.closePath()
        UIColor.grayColor().setFill()
        bezierPath.fill()


        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(ageIcon.minX + floor(ageIcon.width * 0.75510 + 0.5), ageIcon.minY + floor(ageIcon.height * 0.00000 + 0.5), floor(ageIcon.width * 0.87075 + 0.5) - floor(ageIcon.width * 0.75510 + 0.5), floor(ageIcon.height * 0.23333 + 0.5) - floor(ageIcon.height * 0.00000 + 0.5)))
        UIColor.grayColor().setFill()
        ovalPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(ageIcon.minX + floor(ageIcon.width * 0.12925 + 0.5), ageIcon.minY + floor(ageIcon.height * 0.35000 + 0.5), floor(ageIcon.width * 0.88435 + 0.5) - floor(ageIcon.width * 0.12925 + 0.5), floor(ageIcon.height * 0.88333 + 0.5) - floor(ageIcon.height * 0.35000 + 0.5)))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()
    }

    public class func drawProfile() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Text Drawing
        let textRect = CGRectMake(67, 52, 243, 90)
        var textTextContent = NSString(string: "Oscar Bjorkman")
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Center

        let textFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(37), NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRectWithSize(CGSizeMake(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect);
        textTextContent.drawInRect(CGRectMake(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)


        //// Text 2 Drawing
        let text2Rect = CGRectMake(117, 155, 143, 28)
        var text2TextContent = NSString(string: "14 Years Old")
        let text2Style = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        text2Style.alignment = NSTextAlignment.Center

        let text2FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(23), NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRectWithSize(CGSizeMake(text2Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text2Rect);
        text2TextContent.drawInRect(CGRectMake(text2Rect.minX, text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, text2Rect.width, text2TextHeight), withAttributes: text2FontAttributes)
        CGContextRestoreGState(context)
    }

    public class func drawLocation(#frame: CGRect) {


        //// Subframes
        let locationPin: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width) * 1.00000 + 0.5), floor((frame.height) * 1.00000 + 0.5))


        //// LocationPin
        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(locationPin.minX + 0.85355 * locationPin.width, locationPin.minY + 0.10919 * locationPin.height))
        bezierPath.addCurveToPoint(CGPointMake(locationPin.minX + 0.88376 * locationPin.width, locationPin.minY + 0.61182 * locationPin.height), controlPoint1: CGPointMake(locationPin.minX + 1.03817 * locationPin.width, locationPin.minY + 0.24684 * locationPin.height), controlPoint2: CGPointMake(locationPin.minX + 1.04823 * locationPin.width, locationPin.minY + 0.46535 * locationPin.height))
        bezierPath.addCurveToPoint(CGPointMake(locationPin.minX + 0.50000 * locationPin.width, locationPin.minY + 1.00000 * locationPin.height), controlPoint1: CGPointMake(locationPin.minX + 0.78578 * locationPin.width, locationPin.minY + 0.71092 * locationPin.height), controlPoint2: CGPointMake(locationPin.minX + 0.50000 * locationPin.width, locationPin.minY + 1.00000 * locationPin.height))
        bezierPath.addCurveToPoint(CGPointMake(locationPin.minX + 0.11624 * locationPin.width, locationPin.minY + 0.61182 * locationPin.height), controlPoint1: CGPointMake(locationPin.minX + 0.50000 * locationPin.width, locationPin.minY + 1.00000 * locationPin.height), controlPoint2: CGPointMake(locationPin.minX + 0.21422 * locationPin.width, locationPin.minY + 0.71092 * locationPin.height))
        bezierPath.addCurveToPoint(CGPointMake(locationPin.minX + 0.14645 * locationPin.width, locationPin.minY + 0.10919 * locationPin.height), controlPoint1: CGPointMake(locationPin.minX + -0.04823 * locationPin.width, locationPin.minY + 0.46535 * locationPin.height), controlPoint2: CGPointMake(locationPin.minX + -0.03817 * locationPin.width, locationPin.minY + 0.24684 * locationPin.height))
        bezierPath.addLineToPoint(CGPointMake(locationPin.minX + 0.14802 * locationPin.width, locationPin.minY + 0.10803 * locationPin.height))
        bezierPath.addCurveToPoint(CGPointMake(locationPin.minX + 0.85355 * locationPin.width, locationPin.minY + 0.10919 * locationPin.height), controlPoint1: CGPointMake(locationPin.minX + 0.34340 * locationPin.width, locationPin.minY + -0.03640 * locationPin.height), controlPoint2: CGPointMake(locationPin.minX + 0.65881 * locationPin.width, locationPin.minY + -0.03601 * locationPin.height))
        bezierPath.closePath()
        UIColor.grayColor().setFill()
        bezierPath.fill()


        //// Oval 2 Drawing
        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(locationPin.minX + floor(locationPin.width * 0.26190 - 0.5) + 1, locationPin.minY + floor(locationPin.height * 0.19298 + 0.5), floor(locationPin.width * 0.73810 - 0.5) - floor(locationPin.width * 0.26190 - 0.5), floor(locationPin.height * 0.54386 + 0.5) - floor(locationPin.height * 0.19298 + 0.5)))
        UIColor.whiteColor().setFill()
        oval2Path.fill()
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
